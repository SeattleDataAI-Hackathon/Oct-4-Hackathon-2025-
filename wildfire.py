# -*- coding: utf-8 -*-
"""Wildfire.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lEBu-bHUV4QVqMnFKafYSSesC4CwXCyJ
"""

# training wildfire model

!pip install scikit-learn joblib -q

# train_models.py - RPO-DRA Dual Model Training System
# Rescue Priority Optimizer with Dynamic Resource Allocation

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.multioutput import MultiOutputClassifier
import joblib
import warnings
warnings.filterwarnings('ignore')

print("🚨 RPO-DRA Training System - Rescue Priority Optimizer")
print("=" * 70)

# === 1. LOAD CALIFORNIA WILDFIRE STRUCTURE DATA ===
print("\n📂 Loading California Wildfire Structure Dataset...")

# Colab path to cleaned data
DATASET_PATH = "/content/california_wildfire_structures_clean.csv"

try:
    df = pd.read_csv(DATASET_PATH)
    print(f"✅ Loaded {len(df)} structure records")
    print(f"   Columns: {len(df.columns)}")
except FileNotFoundError:
    print(f"❌ File not found: {DATASET_PATH}")
    print("\nCreating sample data for testing...")
    # Create sample data matching the real structure
    df = pd.DataFrame({
        '* Damage': np.random.choice(['No Damage', 'Affected (1-9%)', 'Minor (10-25%)', 'Destroyed (>50%)'], 500),
        '* Structure Type': np.random.choice(['Single Family Residence Single Story', 'Single Family Residence Multi Story', 'Utility Misc Structure'], 500),
        'Structure Category': np.random.choice(['Single Residence', 'Other Minor Structure'], 500),
        '# Units in Structure (if multi unit)': np.random.choice([np.nan, 1, 2, 3, 4], 500),
        '# of Damaged Outbuildings < 120 SQFT': np.random.randint(0, 5, 500),
        '# of Non Damaged Outbuildings < 120 SQFT': np.random.randint(0, 5, 500),
        '* Roof Construction': np.random.choice(['Asphalt', 'Tile', 'Unknown'], 500),
        '* Exterior Siding': np.random.choice(['Wood', 'Stucco Brick Cement', 'Unknown'], 500),
        '* Window Pane': np.random.choice(['Single Pane', 'Multi Pane', 'Unknown'], 500),
        'Year Built (parcel)': np.random.randint(1950, 2020, 500),
        'Assessed Improved Value (parcel)': np.random.randint(100000, 1000000, 500),
        'Structure Defense Actions Taken': np.random.choice(['Hand Crew Fuel Break', 'Combination of Actions', 'Fire Retardant Drop', 'Unknown', np.nan], 500),
        'Latitude': np.random.uniform(38.47, 38.49, 500),
        'Longitude': np.random.uniform(-122.05, -122.01, 500),
        '* Street Number': [str(np.random.randint(1000, 9999)) for _ in range(500)],
        '* Street Name': np.random.choice(['Quail Canyon', 'Putah Creek', 'Pleasants Valley'], 500),
    })

# === 2. DATA PREPROCESSING ===
print("\n🔧 Preprocessing structure data...")

# Fill missing values
df['# Units in Structure (if multi unit)'] = df['# Units in Structure (if multi unit)'].fillna(1)
df['# of Damaged Outbuildings < 120 SQFT'] = df['# of Damaged Outbuildings < 120 SQFT'].fillna(0)
df['# of Non Damaged Outbuildings < 120 SQFT'] = df['# of Non Damaged Outbuildings < 120 SQFT'].fillna(0)
df['Year Built (parcel)'] = df['Year Built (parcel)'].fillna(df['Year Built (parcel)'].median())
df['Assessed Improved Value (parcel)'] = df['Assessed Improved Value (parcel)'].fillna(df['Assessed Improved Value (parcel)'].median())

# Calculate structure age
current_year = 2024
df['structure_age'] = current_year - df['Year Built (parcel)']

# Total outbuildings (indicator for animal rescue need)
df['total_outbuildings'] = df['# of Damaged Outbuildings < 120 SQFT'] + df['# of Non Damaged Outbuildings < 120 SQFT']

print(f"✅ Preprocessed {len(df)} records")
print(f"\nDamage Distribution:")
print(df['* Damage'].value_counts())

# === 3. ENCODE CATEGORICAL VARIABLES ===
print("\n🏷️  Encoding categorical features...")

encoders = {}

# Damage categories (target)
damage_encoder = LabelEncoder()
df['damage_encoded'] = damage_encoder.fit_transform(df['* Damage'])
encoders['damage'] = damage_encoder

# Structure features
for col in ['* Structure Type', 'Structure Category', '* Roof Construction',
            '* Exterior Siding', '* Window Pane', 'Structure Defense Actions Taken']:
    if col in df.columns:
        le = LabelEncoder()
        df[f'{col}_encoded'] = le.fit_transform(df[col].fillna('Unknown'))
        encoders[col] = le

# === 4. CREATE NEED SCORES (Target for Model 1) ===
print("\n📊 Calculating need scores...")

# Medical/SAR Need (based on units and structure type)
df['medical_sar_need'] = np.clip(
    df['# Units in Structure (if multi unit)'] * 2 +  # Multi-unit = higher medical need
    (df['* Structure Type'].str.contains('Multi Story', na=False).astype(int) * 3),
    0, 10
)

# Animal Rescue Need (based on outbuildings)
df['animal_rescue_need'] = np.clip(df['total_outbuildings'] * 2, 0, 10)

# Heavy Equipment Need (based on damage severity and value)
damage_severity_map = {'No Damage': 0, 'Affected (1-9%)': 2, 'Minor (10-25%)': 5, 'Destroyed (>50%)': 10}
df['equipment_need'] = df['* Damage'].map(damage_severity_map).fillna(0)

# SAR Priority (combination of damage + structure type)
df['sar_priority'] = np.clip(
    df['equipment_need'] * 0.6 +
    df['medical_sar_need'] * 0.4,
    0, 10
)

print("✅ Need scores calculated")

# === 5. PREPARE FEATURES FOR MODEL 1 ===
print("\n🎯 Preparing Model 1 features (Damage & Need Forecasting)...")

feature_cols = [
    '* Structure Type_encoded',
    'Structure Category_encoded',
    '* Roof Construction_encoded',
    '* Exterior Siding_encoded',
    '* Window Pane_encoded',
    'structure_age',
    'Assessed Improved Value (parcel)',
    '# Units in Structure (if multi unit)',
    'total_outbuildings'
]

X_model1 = df[feature_cols].copy()

# Multi-output targets for Model 1
y_model1 = df[['damage_encoded', 'medical_sar_need', 'animal_rescue_need',
               'equipment_need', 'sar_priority']].copy()

print(f"✅ Model 1 features: {X_model1.shape}")
print(f"   Features: {list(X_model1.columns)}")

# === 6. TRAIN MODEL 1: Damage & Need Forecasting ===
print("\n🤖 Training Model 1: Damage & Need Forecasting...")

X_train1, X_test1, y_train1, y_test1 = train_test_split(
    X_model1, y_model1, test_size=0.2, random_state=42
)

model1 = RandomForestRegressor(
    n_estimators=100,
    max_depth=15,
    random_state=42,
    n_jobs=-1
)

model1.fit(X_train1, y_train1)

# Evaluate
train_score1 = model1.score(X_train1, y_train1)
test_score1 = model1.score(X_test1, y_test1)

print(f"✅ Model 1 trained successfully!")
print(f"   R² Score (Train): {train_score1:.3f}")
print(f"   R² Score (Test): {test_score1:.3f}")

# Feature importance
importance1 = pd.DataFrame({
    'feature': X_model1.columns,
    'importance': model1.feature_importances_
}).sort_values('importance', ascending=False)

print(f"\n📈 Top 5 Important Features for Damage Prediction:")
for idx, row in importance1.head().iterrows():
    print(f"   {row['feature']}: {row['importance']:.3f}")

# === 7. PREPARE FEATURES FOR MODEL 2 ===
print("\n🎯 Preparing Model 2 features (Resource Allocation)...")

# Get Model 1 predictions for training Model 2
model1_predictions = model1.predict(X_model1)
pred_df = pd.DataFrame(model1_predictions,
                       columns=['pred_damage', 'pred_medical', 'pred_animal',
                               'pred_equipment', 'pred_sar'])

# Add defense action effectiveness
df['defense_encoded'] = df['Structure Defense Actions Taken_encoded']

# Calculate optimal resources based on predictions + historical actions
def calculate_resource_needs(row):
    """Calculate optimal resource allocation based on predictions"""
    fire_engines = int(np.clip(row['pred_damage'] / 2 + row['pred_equipment'] / 5, 1, 5))
    ambulances = int(np.clip(row['pred_medical'] / 3, 0, 4))
    animal_rescue = int(np.clip(row['pred_animal'] / 5, 0, 2))
    heavy_equipment = int(np.clip(row['pred_equipment'] / 4, 0, 3))
    sar_teams = int(np.clip(row['pred_sar'] / 4, 0, 3))

    return pd.Series([fire_engines, ambulances, animal_rescue, heavy_equipment, sar_teams])

resource_targets = pred_df.apply(calculate_resource_needs, axis=1)
resource_targets.columns = ['fire_engines', 'ambulances', 'animal_rescue',
                            'heavy_equipment', 'sar_teams']

X_model2 = pred_df.copy()
y_model2 = resource_targets.copy()

print(f"✅ Model 2 features: {X_model2.shape}")

# === 8. TRAIN MODEL 2: Resource Allocation Optimizer ===
print("\n🚒 Training Model 2: Resource Allocation Optimizer...")

X_train2, X_test2, y_train2, y_test2 = train_test_split(
    X_model2, y_model2, test_size=0.2, random_state=42
)

model2 = RandomForestRegressor(
    n_estimators=100,
    max_depth=12,
    random_state=42,
    n_jobs=-1
)

model2.fit(X_train2, y_train2)

train_score2 = model2.score(X_train2, y_train2)
test_score2 = model2.score(X_test2, y_test2)

print(f"✅ Model 2 trained successfully!")
print(f"   R² Score (Train): {train_score2:.3f}")
print(f"   R² Score (Test): {test_score2:.3f}")

# === 9. SAVE MODELS ===
print("\n💾 Saving model packages...")

model1_package = {
    'model': model1,
    'encoders': encoders,
    'feature_names': list(X_model1.columns),
    'output_names': ['damage', 'medical_sar_need', 'animal_rescue_need',
                     'equipment_need', 'sar_priority'],
    'damage_categories': list(damage_encoder.classes_)
}

model2_package = {
    'model': model2,
    'feature_names': list(X_model2.columns),
    'output_names': list(y_model2.columns),
    'resource_types': ['fire_engines', 'ambulances', 'animal_rescue',
                      'heavy_equipment', 'sar_teams']
}

joblib.dump(model1_package, 'damage_model.pkl')
joblib.dump(model2_package, 'resource_model.pkl')

print("✅ Models saved:")
print("   - damage_model.pkl (Damage & Need Forecasting)")
print("   - resource_model.pkl (Resource Allocation)")

# === 10. TEST PREDICTION ===
print("\n🧪 Testing integrated prediction system...")

test_structure = X_model1.iloc[0:1].copy()
print("\nTest Structure Features:")
print(f"   Structure Age: {test_structure['structure_age'].values[0]:.0f} years")
print(f"   Property Value: ${test_structure['Assessed Improved Value (parcel)'].values[0]:,.0f}")
print(f"   Outbuildings: {test_structure['total_outbuildings'].values[0]:.0f}")

# Model 1 prediction
needs_pred = model1.predict(test_structure)[0]
print(f"\n📊 Model 1 - Damage & Need Assessment:")
print(f"   Damage Severity: {needs_pred[0]:.1f}/3")
print(f"   Medical/SAR Need: {needs_pred[1]:.1f}/10")
print(f"   Animal Rescue Need: {needs_pred[2]:.1f}/10")
print(f"   Equipment Need: {needs_pred[3]:.1f}/10")
print(f"   SAR Priority: {needs_pred[4]:.1f}/10")

# Model 2 prediction
needs_for_model2 = pd.DataFrame([needs_pred],
                                columns=['pred_damage', 'pred_medical', 'pred_animal',
                                        'pred_equipment', 'pred_sar'])
resources = model2.predict(needs_for_model2)[0]

print(f"\n🚒 Model 2 - Optimal Resource Manifest:")
print(f"   🔥 Fire Engines: {int(resources[0])} units")
print(f"   🚑 Ambulances: {int(resources[1])} units")
print(f"   🐕 Animal Rescue Teams: {int(resources[2])} teams")
print(f"   🏗️  Heavy Equipment: {int(resources[3])} units")
print(f"   🔍 SAR Teams: {int(resources[4])} teams")

print("\n" + "=" * 70)
print("🎉 RPO-DRA TRAINING COMPLETE!")
print("📋 Next steps:")
print("   1. python api_server.py  → Start API server")
print("   2. Setup N8n workflow    → Orchestration")
print("   3. Launch Lovable UI     → Dispatch Center")
print("=" * 70)